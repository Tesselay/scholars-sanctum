---
- name: Register list of existing PVE groups
  ansible.builtin.command: pveum group list --output-format json
  register: pve_group_list
  failed_when: false
  changed_when: false

- name: Add admins group to datacenter if missing
  ansible.builtin.command: pveum group add Administrators
  when: "'Administrators' not in (pve_group_list.stdout | from_json | map(attribute='groupid') | list)"
  register: add_user_result
  failed_when: add_user_result.rc != 0
  changed_when: add_user_result.rc == 0

- name: Register list of existing acl
  ansible.builtin.command: pveum acl list --output-format json
  register: pve_acl_list
  failed_when: false
  changed_when: false

- name: Add Administrator role for '/' namespace to administrator group
  ansible.builtin.command: pveum aclmod / -group Administrators -role Administrator
  when: pve_acl_list.stdout | from_json | selectattr('roleid', 'equalto', 'Administrator') | selectattr('ugid', 'equalto', 'Administrators') | list == []
  register: add_role_result
  failed_when: add_role_result.rc != 0
  changed_when: add_role_result.rc == 0

- name: Add users to administrator group
  ansible.builtin.command: pveum user modify {{ item }} -group Administrators
  when: item not in (pve_group_list.stdout | from_json | selectattr('groupid', 'equalto', 'Administrators') | map(attribute='users') | list)
  register: add_to_group_result
  loop: "{{ pam_users }}"
  failed_when: add_to_group_result.rc != 0
  changed_when: add_to_group_result.rc == 0
